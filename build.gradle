allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    repositories {
        maven {
            url "http://download.osgeo.org/webdav/geotools/"
        }

        mavenCentral()

        maven {
            url "https://oss.sonatype.org/content/repositories/releases/"
        }

        maven {
            url "http://maven.geotoolkit.org/"
        }
    }

}

subprojects {

    dependencies {
        testImplementation(
                'org.scalatest:scalatest_2.11:3.0.0',
                'org.junit.jupiter:junit-jupiter-api:5.1.0',
                // https://mvnrepository.com/artifact/com.sun.jersey/jersey-client
                'org.glassfish.jersey.core:jersey-client:2.5.1',
                'com.fasterxml.jackson.core:jackson-core:2.9.7',
                'org.mockito:mockito-all:1.10.19',
//                'com.github.stefanbirkner:system-rules:1.19.0'
        )
        testRuntimeOnly(
                'org.junit.jupiter:junit-jupiter-engine:5.1.0'
        )
    }

    test {
        useJUnitPlatform()

        // show standard out and standard error of the test JVM(s) on the console
        testLogging.showStandardStreams = true

        // set heap size for the test JVM(s)
        minHeapSize = "128m"
        maxHeapSize = "512m"

        // set JVM arguments for the test JVM(s)
        jvmArgs '-XX:MaxPermSize=256m'

        // listen to events in the test execution lifecycle
        beforeTest { descriptor ->
            logger.lifecycle("Running test:  $descriptor")
        }

        // Fail the 'test' task on the first test failure
        failFast = true

        // listen to standard out and standard error of the test JVM(s)
        onOutput { descriptor, event ->
            logger.lifecycle("Test:  $descriptor  produced standard out/err: ${event.message}")
        }

    }


}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'com/garmin/**'
            ])
        })
    }


    reports {
        xml.enabled = true
        csv.enabled = false
        html.destination file("${buildDir}/reports/coverage/")
        xml.destination file("${buildDir}/reports/coverage/jacocoTestReport.xml")

    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

build.dependsOn {
    codeCoverageReport
}


//sourceCompatibility = 1.8
//targetCompatibility = 1.8