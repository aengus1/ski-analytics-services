import ski.crunch.build.DeployServerless

/*
 ####################   Build Script Section  ################################################
 ##   Specify global ext variables used throughout all .gradle build files
 ##   Specify code dependencies & repositories used by the build itself
 ############################################################################################
*/
buildscript {
    ext {
        gradleVersion = "6.0.1"
        jacksonVersion = "2.10.2"
        awsVersion = "1.11.728"
    }
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.5"
    }
}

/*
 ####################   All Projects Section  ################################################
 ##   Specify plugins and repositories that are used in all .gradle build files
 ##   Applied to root project and sub-modules
 ############################################################################################
*/
allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'com.dorongold.task-tree'

    repositories {
        maven {
            url "https://download.osgeo.org/webdav/geotools/"
        }
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/releases/"
        }
        maven {
            url "https://maven.geotoolkit.org/"
        }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Xlint:unchecked'
        options.deprecation = true
    }
}

/*
 ####################   Sub Projects Section  ################################################
 ##   Specify common configuration used by all sub projects
 ##   Adds support for integration test source-set
 ##   Adds common dependencies for tests
 ##   Adds deploy task
 ##   Adds test coverage report task
 ##   Adds test configuration
 ##   Adds integration test configuration from external file
 ############################################################################################
*/
subprojects {

    if (project.getBuildDir().getAbsolutePath().contains("cloudformation_custom_resources")) {
        apply from: '../../../buildSrc/src/main/gradle/integration-test.gradle'
    } else {
        apply from: '../../buildSrc/src/main/gradle/integration-test.gradle'
    }

    sourceSets {
        integrationTest {
            java {
                compileClasspath += sourceSets.main.output + sourceSets.test.output + configurations.testCompileClasspath + configurations.integrationTestCompileClasspath
                runtimeClasspath += sourceSets.main.output + sourceSets.test.output + configurations.integrationTestRuntimeClasspath
                srcDirs = ['src/integration-test/java']
            }
            resources.srcDir file('src/integration-test/resources')
        }
    }

    configurations {
        integrationTestCompile.extendsFrom testImplementation
        integrationTestRuntime.extendsFrom testRuntime
    }

    dependencies {
        testImplementation(
                "org.scalatest:scalatest_2.11:3.0.0",
                "org.junit.jupiter:junit-jupiter-api:5.4.0",
                "org.glassfish.jersey.core:jersey-client:2.5.1",
                "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
                "org.mockito:mockito-junit-jupiter:2.23.0"
        )
        testRuntimeOnly(
                'org.junit.jupiter:junit-jupiter-engine:5.4.0',
                project(path: ':common', configuration: 'testClasses')
        )
    }

    task deploy(type: DeployServerless)
    deploy.dependsOn build

    jacocoTestReport {
        if (additionalSourceDirs == null) {
            return
        }
        additionalSourceDirs.from = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories.from = files(sourceSets.main.allSource.srcDirs)
        classDirectories.from = files(sourceSets.main.output)
        executionData.from = fileTree(buildDir).include("jacoco/*.exec")
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
        afterEvaluate {
            classDirectories.from = files(classDirectories.files.collect {
                fileTree(dir: it, exclude: ['com/garmin/**', 'ski/crunch/model/**'])
            })
        }
    }

    test {
        useJUnitPlatform()

        testLogging.showStandardStreams = true
        minHeapSize = "128m"
        maxHeapSize = "512m"
        jvmArgs '-XX:MaxPermSize=256m'

        // listen to events in the test execution lifecycle
        beforeTest { descriptor ->
            logger.lifecycle("Running test:  $descriptor")
        }

        // Fail the 'test' task on the first test failure
        failFast = false

        onOutput { descriptor, event ->
            logger.lifecycle("Test:  $descriptor  produced standard out/err: ${event.message}")
        }

        reports {
            junitXml.enabled = true
            html.enabled = true
        }
    }

    task wrapper(type: Wrapper) {
        gradleVersion = "${gradleVersion}"
    }

}

/*
 ####################   Additional Root Build Logic  ################################################
 ##   Add Jacoco build logic from external file
 ####################################################################################################
*/
apply from: 'buildSrc/src/main/gradle/coverage.gradle'

clean.dependsOn {
    subprojects*.clean
}
