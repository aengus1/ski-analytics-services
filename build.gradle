import ski.crunch.build.DeployServerless

/*
 ####################   Build Script Section  ################################################
 ##   Specify global ext variables used throughout all .gradle build files
 ##   Specify code dependencies & repositories used by the build itself
 ############################################################################################
*/
buildscript {
    ext {
        gradleVersion = "6.0.1"
        jacksonVersion = "2.10.2"
        awsVersion = "1.11.728"
    }
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.5"
    }
}



/*
 ####################   All Projects Section  ################################################
 ##   Specify plugins and repositories that are used in all .gradle build files
 ##   Applied to root project and sub-modules
 ############################################################################################
*/
allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'com.dorongold.task-tree'

    repositories {
        maven {
            url "https://download.osgeo.org/webdav/geotools/"
        }
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/releases/"
        }
        maven {
            url "https://maven.geotoolkit.org/"
        }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Xlint:unchecked'
        options.deprecation = true
    }
}

/*
 ####################   Sub Projects Section  ################################################
 ##   Specify common configuration used by all sub projects
 ##   Adds support for integration test source-set
 ##   Adds common dependencies for tests
 ##   Adds deploy task
 ##   Adds test coverage report task
 ##   Adds test configuration
 ##   Adds integration test configuration from external file
 ############################################################################################
*/
subprojects {

        sourceSets {
            integrationTest {
                java {
                    compileClasspath += sourceSets.main.output + sourceSets.test.output + configurations.testCompileClasspath + configurations.integrationTestCompileClasspath
                    runtimeClasspath += sourceSets.main.output + sourceSets.test.output + configurations.integrationTestRuntimeClasspath
                    srcDirs = ['src/integration-test/java']
                }
                resources.srcDir file('src/integration-test/resources')
            }
        }

    configurations {
        integrationTestCompile.extendsFrom testImplementation
        integrationTestRuntime.extendsFrom testRuntime
    }

    dependencies {
        testImplementation(
                "org.scalatest:scalatest_2.11:3.0.0",
                "org.junit.jupiter:junit-jupiter-api:5.4.0",
                "org.glassfish.jersey.core:jersey-client:2.5.1",
                "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
                "org.mockito:mockito-junit-jupiter:2.23.0"
        )
        testRuntimeOnly(
                'org.junit.jupiter:junit-jupiter-engine:5.4.0',
                project(path: ':common', configuration: 'testClasses')
        )
    }

    task deploy(type: DeployServerless)
    deploy.dependsOn build


    apply from: "${getProject().getParent().getProjectDir()}/gradle/test.gradle"
    apply from: "${getProject().getParent().getProjectDir()}/gradle/integration-test.gradle"

}

/*
 ####################   Additional Root Build Logic  ################################################
 ##   Add Jacoco build logic from external file
 ####################################################################################################
*/
apply from: "${projectDir}/gradle/coverage.gradle"

clean.dependsOn {
    subprojects*.clean
}
