task jacocoRootReport(type: JacocoReport) {
    if (additionalSourceDirs == null ) {
        return
    }
    group = "report"
    description = "runs root jacoco report"
    dependsOn = subprojects.test
    additionalSourceDirs.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(subprojects.sourceSets.main.output)
    executionData.from = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        subprojects.findAll { subproject ->
            (subproject.pluginManager.hasPlugin('java')
                    || subproject.pluginManager.hasPlugin('scala')
                    || subproject.pluginManager.hasPlugin('java-library'))
        }.each { subproject ->
            additionalSourceDirs files((Set<File>) subproject.sourceSets.main.allSource.srcDirs)
            additionalClassDirs((FileCollection) subproject.sourceSets.main.output)
            if (subproject.pluginManager.hasPlugin('jacoco')) {
                executionData subproject.tasks.jacocoTestReport.executionData
            }
        }

        executionData.from = files(executionData.findAll {
            it.exists()
        })
    }

}


configurations { codacy }

dependencies {
    codacy 'com.codacy:codacy-coverage-reporter:latest.release'
}

task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    group = "report"
    description = "sends coverage report to codacy.  requires environment variable to be set"
    args = [
            "report",
            "-l",
            "Java",
            "-r",
            "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
    ]
}

jacocoRootReport.dependsOn {
    subprojects*.test
    subprojects*.integrationTest
}