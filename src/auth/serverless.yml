service: auth

provider:
  name: aws
  runtime: java11
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)}}" # notice the double quotes for yaml to ignore the escape characters!
  region: ${{file(../../infra/envs/global.tfvars.json):primary_region}}
  stage: ${{opt:stage}}
  stackName: ${{opt:stage}}-${{self:custom.projectName}}-${{self:service}}
  deploymentBucket: ${{opt:stage}}-deployment-${{self:custom.projectName}}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - execute-api:ManageConnections
      Resource: arn:aws:execute-api:${{self:provider.region}}:*:*/*
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${{self:provider.region}}:*:table/${{self:custom.userTable}}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${{self:provider.region}}:*:table/${{self:custom.userTable}}/index/email-index

custom: ${{file(../../config/custom.yml)}}

package:
  artifact: build/distributions/${{self:service}}.zip

functions:
  # post registration confirmation trigger to create record in user table
  postConfirmation:
    handler: ski.crunch.auth.AddUserSettings
    environment:
      userTable: ${{self:custom.userTable}}
    layers:
      - ${{cf:${{opt:stage}}-${{self:custom.projectName}}-common.UtilsLambdaLayerQualifiedArn}}
      - ${{cf:${{opt:stage}}-${{self:custom.projectName}}-common.CommonLambdaLayerQualifiedArn}}
  # pre sign up trigger to capture password in case of cognito stack termination
  preSignup:
    handler: ski.crunch.auth.CapturePwHash
    environment:
      userTable: ${{self:custom.userTable}}
    layers:
      - ${{cf:${{opt:stage}}-${{self:custom.projectName}}-common.UtilsLambdaLayerQualifiedArn}}
      - ${{cf:${{opt:stage}}-${{self:custom.projectName}}-common.CommonLambdaLayerQualifiedArn}}
  # user migration trigger to authenticate user if doesn't exist in cognito
  userMigration:
    handler: ski.crunch.auth.UserMigration
    environment:
      userTable: ${{self:custom.userTable}}
      region: ${{self:provider.region}}
    layers:
      - ${{cf:${{opt:stage}}-${{self:custom.projectName}}-common.UtilsLambdaLayerQualifiedArn}}
      - ${{cf:${{opt:stage}}-${{self:custom.projectName}}-common.CommonLambdaLayerQualifiedArn}}

resources:
  Resources:
    UserPoolPostConfirmationTrigger:
      Type: Custom::UserPoolTrigger
      Version: 1.0
      DependsOn: PostConfirmationLambdaFunction
      Properties:
        ServiceToken: ${{cf:${{opt:stage}}-${{self:custom.projectName}}-cf-userpool-trigger.UserPoolTriggerFunctionArn}}
        Name: ${{opt:stage}}-userPoolTrigger
        Region: ${{self:provider.region}}
        TriggerType: PostConfirmation
        UserPool: ${{self:custom.userPoolId}}
        LambdaFunctionArn: !GetAtt 'PostConfirmationLambdaFunction.Arn'
        # a UUID forces a refetch from lambda on each deploy
        UUID: ${{sls:instanceId}}

    OnCognitoConfirmationPermission:
      Type: 'AWS::Lambda::Permission'
      DependsOn: PostConfirmationLambdaFunction
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          !GetAtt PostConfirmationLambdaFunction.Arn
        Principal: "cognito-idp.amazonaws.com"
        SourceArn: ${{self:custom.userPoolArn}}

    UserPoolPreSignupTrigger:
      Type: Custom::UserPoolTrigger
      Version: 1.0
      DependsOn: PreSignupLambdaFunction
      Properties:
        ServiceToken: ${{cf:${{opt:stage}}-${{self:custom.projectName}}-cf-userpool-trigger.UserPoolTriggerFunctionArn}}
        Name: ${{opt:stage}}-userPoolTrigger
        Region: ${{self:provider.region}}
        TriggerType: PreSignUp
        UserPool: ${{self:custom.userPoolId}}
        LambdaFunctionArn: !GetAtt 'PreSignupLambdaFunction.Arn'
        # a UUID forces a refetch from lambda on each deploy
        UUID: ${{sls:instanceId}}

    OnCognitoPreSignupPermission:
      Type: 'AWS::Lambda::Permission'
      DependsOn: PreSignupLambdaFunction
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          !GetAtt PreSignupLambdaFunction.Arn
        Principal: "cognito-idp.amazonaws.com"
        SourceArn: ${{self:custom.userPoolArn}}

    UserPoolMigrationTrigger:
      Type: Custom::UserPoolTrigger
      Version: 1.0
      DependsOn: UserMigrationLambdaFunction
      Properties:
        ServiceToken: ${{cf:${{opt:stage}}-${{self:custom.projectName}}-cf-userpool-trigger.UserPoolTriggerFunctionArn}}
        Name: ${{opt:stage}}-userPoolTrigger
        Region: ${{self:provider.region}}
        TriggerType: UserMigration
        UserPool: ${{self:custom.userPoolId}}
        LambdaFunctionArn: !GetAtt 'UserMigrationLambdaFunction.Arn'
        # a UUID forces a refetch from lambda on each deploy
        UUID: ${{sls:instanceId}}

    OnCognitoUserMigrationPermission:
      Type: 'AWS::Lambda::Permission'
      DependsOn: UserMigrationLambdaFunction
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          !GetAtt UserMigrationLambdaFunction.Arn
        Principal: "cognito-idp.amazonaws.com"
        SourceArn: ${{self:custom.userPoolArn}}

  Outputs:
    PostConfirmationArn:
      Value:
        Fn::GetAtt: PostConfirmationLambdaFunction.Arn
      Export:
       Name: PostConfirmationArn-${{opt:stage}}
    PreSignupArn:
      Value:
        Fn::GetAtt: PreSignupLambdaFunction.Arn
      Export:
        Name: PreSignupArn-${{opt:stage}}
    UserMigrationArn:
      Value:
        Fn::GetAtt: UserMigrationLambdaFunction.Arn
      Export:
        Name: UserMigrationArn-${{opt:stage}}