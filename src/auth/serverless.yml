
service: authentication
tenant: aengus
app: ski-analytics

provider:
  name: aws
  runtime: java8
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)}}" # notice the double quotes for yaml to ignore the escape characters!
#  fallback to us-west as cognito not available in canada
  region: us-west-2
  stage: staging
  stackName: ${{self:custom.currentStage}}-ski-analytics-authentication-stack
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${{opt:region, self:provider.region}}:*:table/${{self:custom.userTable}}"
  websocketsApiName: ${{self:custom.currentStage}}-ski-analytics-ws
  websocketsApiRouteSelectionExpression: $request.body.action
#  logs:
#    websocket: true


custom:
  currentStage: ${{opt:stage, self:provider.stage}}
  userTable: ${{self:custom.currentStage}}-crunch-User
  resourceTags:
    - Key: "project"
      Value: "ski-analytics"
    - Key: "module"
      Value: "auth"

package:
  artifact: build/distributions/auth.zip

functions:
  # post registration confirmation trigger to create record in user table
  postConfirmation:
    handler: ski.crunch.auth.AddUserSettings
    events:
      - cognitoUserPool:
          pool: ${{self:custom.currentStage}}-crunch-ski-userpool
          trigger: PostConfirmation
  # web socket connection for client callbacks
  connectionHandler:
    handler: ski.crunch.auth.InitWebSocketHandler
    environment:
      userTable: ${{self:custom.userTable}}
    events:
      - websocket:
          route: $connect
          authorizer: wsAuth
          identitySource:
            - 'route.request.querystring.token'
      - websocket:
          route: $disconnect
      - websocket:
          route: $default
          handler: ski.crunch.auth.DefaultWebSocketHandler
    # custom authorizer for websocket (cognito auth not yet supported with apig ws)
  wsAuth:
    handler: ski.crunch.auth.CustomWsAuthorizer
    environment:
      appClientId: ${{cf:${{self:provider.stackName}}.UserPoolClientId}}
      userPoolId: ${{cf:${{self:provider.stackName}}.UserPoolArn}}
      region: ${{self:provider.region}}



resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false
          InviteMessageTemplate:
            #EmailMessage: ${{file(src/main/resources/verification_email.html)}}
            EmailMessage: "Hello there {username},  You're verification code is {####}"
            EmailSubject: "Welcome to Crunch.Ski!"
          UnusedAccountValidityDays: 365
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
            - email
        DeviceConfiguration:
          ChallengeRequiredOnNewDevice: false
          DeviceOnlyRememberedOnUserPrompt: false
#        EmailConfiguration: -> this is erroring out saying invalid email address :( set it manually in console
#          ReplyToEmailAddress: admin@ski-analytics.ca
#          SourceArn: arn:aws:ses:us-west-2:556823078430:identity/ski-analytics.ca
        MfaConfiguration: OFF
        # commented because can't update an existing userpool (it creates a duplicate). Uncomment for prod deployment
#        LambdaConfig:
#          PostConfirmation: postConfirmation #!Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${put your lambda name that will be generated by serverless here}'
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: true
        Schema:
          - AttributeDataType: String
            DeveloperOnlyAttribute: false
            Mutable: false
            Name: email
            Required: true
          - AttributeDataType: String
            DeveloperOnlyAttribute: false
            Mutable: false
            Name: name
            StringAttributeConstraints:
              MinLength: 2
              MaxLength: 20
            Required: false
          - AttributeDataType: String
            DeveloperOnlyAttribute: false
            Mutable: false
            Name: familyName
            StringAttributeConstraints:
              MinLength: 2
              MaxLength: 20
            Required: false
        UserPoolName: ${{self:custom.currentStage}}-crunch-ski-userpool
        UserPoolTags:
          project: ski-analytics
          module: auth
    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
         ClientName: ${{self:custom.currentStage}}-crunch-ski-web
         ExplicitAuthFlows:
           - USER_PASSWORD_AUTH
         GenerateSecret: false
         UserPoolId:
           Ref: UserPool
    AppSyncDynamoDBPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Description: "Managed policy to allow AWS AppSync to access the tables created by this template."
        Path: /appsync/
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:DeleteItem
                - dynamodb:UpdateItem
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:BatchGetItem
                - dynamodb:BatchWriteItem
              Resource:  "arn:aws:dynamodb:${{opt:region, self:provider.region}}:*:table/${{self:custom.userTable}}"
    DynamoTableForUser:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${{self:custom.userTable}}
        Tags: ${{self:custom.resourceTags}}

#     IdentityPool:
#       Type: "AWS::Cognito::IdentityPool"
#       Properties:
#         IdentityPoolName: ${{self:custom.currentStage}}-crunch-ski-identitypool
#         AllowUnauthenticatedIdentities: false
#         CognitoIdentityProviders:
#           - ClientId:
#               Ref: UserPool
#             ProviderName:
#               Fn::GetAtt: [UserPool, ProviderName]
#             ServerSideTokenCheck: true


  Outputs:
    UserPoolArn:
      Value:
        Ref: UserPool
#      Export:
#        Name: UserPoolArn-${{self:custom.currentStage}}
      Export:
        Name:
          Fn::Join: ['',[ Ref: AWS::StackName,'-UserPoolArn']]
    UserPoolProviderName:
      Value:
        Fn::GetAtt: [UserPool, ProviderName]
    UserPoolProviderUrl:
      Value:
        Fn::GetAtt: [UserPool, ProviderURL]
    UserPoolClientId:
      Value:
        Ref: UserPoolClient
      Export:
        Name: UserPoolClient-${{self:custom.currentStage}}
    UserTableArn:
      Value:
        Fn::GetAtt: [DynamoTableForUser, Arn]
    UserTableName:
      Value: ${{self:custom.userTable}}
      Export:
        Name:
          Fn::Join: ['',[Ref: AWS::StackName, '-UserTableName']]