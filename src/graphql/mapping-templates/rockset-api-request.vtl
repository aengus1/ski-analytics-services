## variables for predicate building
#set($predicateString= {})
#set($concat= "")
#set($operatorMap = {})
$util.qr($operatorMap.put("EQ", "="))
$util.qr($operatorMap.put("NE", "!="))
$util.qr($operatorMap.put("GT", ">"))
$util.qr($operatorMap.put("GTE", ">="))
$util.qr($operatorMap.put("LT", "<"))
$util.qr($operatorMap.put("LTE", "<="))
##$util.qr($operatorMap.put("LIKE", "LIKE %"))
##$util.qr($operatorMap.put("STARTS_WITH", "="))

## pagination arithmetic
#set($limit = "")
#if($ctx.arguments.pagination)
    #if(!$ctx.arguments.pagination.pageNumber)
        $util.error($ctx.error.message, $ctx.error.type)
    #end
    #if(!$ctx.arguments.pagination.pageSize)
        $util.error($ctx.error.message, $ctx.error.type)
    #end
    #set($offsetA = $ctx.arguments.pagination.pageNumber - 1)
    #set($offset = $offsetA * $ctx.arguments.pagination.pageSize)
    #set($limit = "LIMIT $ctx.arguments.pagination.pageSize OFFSET $offset")
#end
## to debug
## $util.validate(false, $limit)

## ordering
#set($orderby = "")
#if($ctx.arguments.order)
    #set($dir="")
    #if($ctx.arguments.order.asc)
        #set($dir="asc")
    #else
        #set($dir="desc")
    #end
    #set($orderby=" ORDER BY $ctx.arguments.order.attribute $dir")
#end
## debug
##$util.validate(false, $orderby)

{
        "method": "POST",
        "resourcePath": "/v1/orgs/self/queries",
        "params":{
            "body":{
                "sql": {
                    "parameters": [
                        {
                            "name": "_userId",
                            "value": "$util.escapeJavaScript($ctx.identity.sub)",
                            "type" : "string"
                        }  #if($ctx.args.predicates.size() > 0),#end

                    #foreach( $item in $ctx.arguments.predicates)
                     #set($lType= $item.type.toLowerCase())
                      {
                          "name" : "$util.escapeJavaScript("_")$item.name",
                          "value" : "$item.value",
                          "type" : "$lType"
                      } #if( $foreach.hasNext),#end

                      #set($concat = $predicateString.get("concat"))
                      $util.qr($predicateString.put("concat", " $concat AND $item.name $operatorMap.get($item.operator) :_$item.name "))
                    #end
                ],
 "query": "SELECT * FROM (SELECT  * from activity_workspace.$ctx.prev.result.get(1)_ActivityCollection WHERE userId = :_userId $predicateString.get("concat") $orderby $limit ) as query JOIN (SELECT count(*) AS cnt from activity_workspace.$ctx.prev.result.get(1)_ActivityCollection WHERE userId = :_userId $predicateString.get("concat")) AS cnt on 1=1"
            }
        },
        "headers":{
            "Content-Type": "application/json",
            "Authorization": " ApiKey $ctx.prev.result.get(0)"
        }
    }
}