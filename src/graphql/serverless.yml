## This Stack depends on auth-stack
service: graphql

plugins:
  - serverless-appsync-plugin
provider:
  name: aws
  runtime: nodejs12.x
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)}}" # notice the double quotes for yaml to ignore the escape characters!
  region: ${{file(../../infra/envs/global.tfvars.json):primary_region}}
  stackName: ${{opt:stage}}-${{self:custom.projectName}}-${{self:service}}
  deploymentBucket: ${{opt:stage}}-deployment-${{self:custom.projectName}}
  stage: ${{opt:stage}}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${{self:custom.primaryRegion}}:*:table/${{self:custom.userTable}}"
    - Effect: Allow
      Action:
        - ssm:Describe*
        - ssm:Get*
        - ssm:List*
      Resource: "arn:aws:ssm:${{self:custom.primaryRegion}}:*:parameter/${{opt:stage}}-*"
custom:
  primaryRegion: ${{file(../../infra/envs/global.tfvars.json):primary_region}}
  resourceTags:
    - Key: "project"
      Value: ${{self:custom.projectName}}
    - Key: "stage"
      Value: ${{opt:stage}}
    - Key: "module"
      Value: ${{self:service}}

    ## common variables
  projectName: ${{file(../../infra/envs/global.tfvars.json):project_name}}
  domainName: ${{file(../../infra/envs/global.tfvars.json):domain_name}}
  dataStack: ${{opt:stage}}-${{self:custom.projectName}}-data-var-stack

    ## tables
  userTable: ${{opt:stage}}-${{self:custom.projectName}}-userTable
  activityTable:  ${{opt:stage}}-${{self:custom.projectName}}-Activity

    ## buckets
  activityBucketName: ${{opt:stage}}-activity-${{self:custom.projectName}}
  rawActivityBucketName: ${{opt:stage}}-raw-activity-${{self:custom.projectName}}

    ##cognito
  ## note that region is intentionally specified in cf output reference
  userPoolArn: ${{cf.${{self:custom.primaryRegion}}:${{self:custom.dataStack}}.UserPoolArn${{opt:stage}}}}
  userTableDSName: ${{opt:stage}}_crunch_UserTable_DS
  authStackName: ${{opt:stage}}-${{self:custom.projectName}}-auth
  appSync:
    name: ${{opt:stage}}-appsync-api
    authenticationType: "AMAZON_COGNITO_USER_POOLS"
    userPoolConfig:
      userPoolId: ${{cf.${{self:custom.primaryRegion}}:${{self:custom.dataStack}}.UserPoolId${{opt:stage}}}}
      awsRegion: ${{self:custom.primaryRegion}}
      defaultAction: "ALLOW"
    logConfig:
      loggingRoleArn: { Fn::GetAtt: [DynamoDBRole, Arn] } # Where AppSyncLoggingServiceRole is a role with CloudWatch Logs write access
      level: ALL # Logging Level: NONE | ERROR | ALL
    mappingTemplatesLocation: mapping-templates
    mappingTemplates:
      - dataSource: ${{self:custom.userTableDSName}}
        type: Query
        field: getUser
        request: get-user-settings-request-template.vtl
        response: generic-response-template.vtl
      - dataSource: ${{self:custom.userTableDSName}}
        type: Mutation
        field: addUser
        request: add-user-settings-request-template.vtl
        response: generic-response-template.vtl
      - dataSource: ${{self:custom.userTableDSName}}
        type: Mutation
        field: saveHeight
        request: save-height-request-template.vtl
        response: generic-response-template.vtl
      - dataSource: ${{self:custom.userTableDSName}}
        type: Mutation
        field: saveWeight
        request: save-weight-request-template.vtl
        response: generic-response-template.vtl
      - dataSource: ${{self:custom.userTableDSName}}
        type: Mutation
        field: saveGender
        request: save-gender-request-template.vtl
        response: generic-response-template.vtl
      - dataSource: ${{self:custom.userTableDSName}}
        type: Mutation
        field: saveHrZones
        request: save-hrzones-request-template.vtl
        response: generic-response-template.vtl
      - dataSource: ${{self:custom.userTableDSName}}
        type: Mutation
        field: addTag
        request: add-tag-request-template.vtl
        response: generic-response-template.vtl
      - dataSource: ${{self:custom.userTableDSName}}
        type: Mutation
        field: renameTag
        request: rename-tag-request-template.vtl
        response: generic-response-template.vtl
      - dataSource: ${{self:custom.userTableDSName}}
        type: Mutation
        field: deleteTag
        request: delete-tag-request-template.vtl
        response: generic-response-template.vtl
    schema: schema.graphql
    dataSources:
      - type: AMAZON_DYNAMODB
        name: ${{self:custom.userTableDSName}}
        description: "user settings table"
        config:
          tableName: ${{self:custom.userTable}}
          serviceRoleArn: { Fn::GetAtt: [DynamoDBRole, Arn] } # Where AppSyncDynamoDBServiceRole is an IAM role defined in Resources
          region: ${{self:custom.primaryRegion}}
functions:
  RetrieveRocksetApiKey:
    handler: search/retrieve_rockset_api_key.handler
    memorySize: 128
    description: Retrieves rockset API key from SSM store
    environment:
      stage: ${{opt:stage}}
      region: ${{self:custom.primaryRegion}}
resources:
  Resources:
    DynamoDBRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - sts:AssumeRole
              Principal:
                Service:
                  - appsync.amazonaws.com
        RoleName: ${{opt:stage}}-appsync-dynamodb-role
        ManagedPolicyArns:
          - Ref: AppSyncDynamoDBPolicy
          - Ref: AppSyncLoggingPolicy
      DependsOn:
        - AppSyncDynamoDBPolicy
        - AppSyncLoggingPolicy
    AppSyncLoggingPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Description: "Managed policy to allow appsync access to cloudwatch logs"
        Path: /appsync/
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cloudwatch:*
                - logs:*
              Resource: "*"

    AppSyncDynamoDBPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Description: "Managed policy to allow AWS AppSync to access the tables created by this template."
        Path: /appsync/
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:DeleteItem
                - dynamodb:UpdateItem
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:BatchGetItem
                - dynamodb:BatchWriteItem
              Resource:  "arn:aws:dynamodb:${{self:custom.primaryRegion}}:*:table/${{self:custom.userTable}}"

    RocksetIntegration:
      Type: Custom::RocksetIntegration
      Version: 1.0
      Properties:
        ServiceToken: ${{cf:${{opt:stage}}-${{self:custom.projectName}}-cf-rockset.RocksetIntegrationFunctionArn}}
        Name: ${{opt:stage}}-searchIntegration
        Region: ${{self:custom.primaryRegion}}
        Stage: ${{opt:stage}}
        ApiKeySSM: ${{opt:stage}}-rockset-api-key
        ExternalId: "7f8a915dfc74e3b5aea8f37f34f1d869726a8aca5c6a8e14d36a4825db25d628"
        RocksetAccountId: "318212636800"
        IntegrationType: "dynamodb"
        AccessibleResources:
          - "arn:aws:dynamodb:*:*:table/*"
          - "arn:aws:dynamodb:*:*:table/*/stream/*"
        Tags: ${{self:custom.resourceTags}}
    RocksetWorkspace:
      Type: Custom::RocksetWorkspace
      Version: 1.0
      Properties:
        ServiceToken: ${{cf:${{opt:stage}}-${{self:custom.projectName}}-cf-rockset.RocksetWorkspaceFunctionArn}}
        Name: activity_workspace
        Description: crunch.ski activity table search
        Region:  ${{self:custom.primaryRegion}}
        ApiKeySSM:  ${{opt:stage}}-rockset-api-key
    RocksetCollection:
      Type: Custom::RocksetCollection
      Version: 1.0
      Properties:
        ServiceToken: ${{cf:${{opt:stage}}-${{self:custom.projectName}}-cf-rockset.RocksetCollectionFunctionArn}}
        Name: ${{opt:stage}}-ActivityCollection
        Description: searchable version of Activity table
        Workspace:
          Fn::GetAtt:
            - RocksetWorkspace
            - WorkspaceName
        Region: ${{self:custom.primaryRegion}}
        Stage: ${{opt:stage}}
        IntegrationName:
          Fn::GetAtt:
            - RocksetIntegration
            - IntegrationName
        ApiKeySSM: ${{opt:stage}}-rockset-api-key
        DynamoDbDataSource:
          DynamoDbAwsRegion:  ${{self:custom.primaryRegion}}
          DynamoDbTableName:  ${{opt:stage}}-${{self:custom.projectName}}-Activity
          DynamoDbRcu: 1

