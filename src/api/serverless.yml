service: api
tenant: aengus
app: ski-analytics

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
  currentStage: ${{opt:stage, self:provider.stage}}
  domainName: crunch.ski
  resourceTags:
              -
                Key: "project"
                Value: "ski-analytics"
              -
                Key: "module"
                Value: "api"
  activityBucketName: "activity-${{self:custom.currentStage}}.${{self:custom.domainName}}"
  userPoolArn:
    Fn::ImportValue:  UserPoolArn


provider:
  name: aws
  runtime: java8
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)}}" # notice the double quotes for yaml to ignore the escape characters!
  region: ca-central-1
  stage: staging
  stackName: ${{self:custom.currentStage}}-ski-analytics-api-stack
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
      Resource: "arn:aws:s3:::${{self:custom.activityBucketName}}/*"

package:
  artifact: build/distributions/api.zip

functions:
  GetActivityLambda:
    handler: com.serverless.Handler
    environment:
      s3ActivityBucketName: ${{self:custom.activityBucketName}}
    events:
      - http:
          path: activity/{id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true
          authorizer:
            arn: arn:aws:cognito-idp:us-west-2:556823078430:userpool/us-west-2_FrH0UdrNz
            ## TODO revisit this. need a way to dynamically reference userpool arn from other stack
            ## had to hardcode this due to an issue with arns https://github.com/serverless/serverless/issues/3129
            ### note - to access this function you need to include an Authorizer header on the request, containing the
            ### Id token - not the access token

resources:
  Resources:
    S3BucketForActivity:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${{self:custom.activityBucketName}}
        Tags: ${{self:custom.resourceTags}}
#    S3BucketPolicyForActixvityBucket:
#              Type: AWS::S3::BucketPolicy
#              Properties:
#                Bucket:
#                  Ref: S3BucketForActivity
#                PolicyDocument:
#                  Version: '2012-10-17'
#                  Statement:
#                    - Action:
#                        - s3:GetObject
#                      Effect: Allow
#                      Resource:
#                        Fn::Join: ['', [Fn::GetAtt: [S3BucketForActivity, Arn],"/*"]]
#                      Principal:
#                        AWS:
#                          Fn::GetAtt: [GetActivityLambdaLambdaFunction, Arn]



# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
