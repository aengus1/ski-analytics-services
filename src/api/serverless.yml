# Provisions the API stack, activity rest endpoints
# Depends on authentication stack, common stack
service: api

plugins:
  - serverless-apigw-binary
provider:
  name: aws
  runtime: java8
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)}}" # notice the double quotes for yaml to ignore the escape characters!
  region: ${{file(../../infra/stacks/global.tfvars.json):primary_region}}
  stackName: ${{opt:stage}}-${{self:custom.projectName}}-${{self:service}}
  stage: ${{opt:stage}}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource: "arn:aws:s3:::${{self:custom.activityBucketName}}"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: "arn:aws:s3:::${{self:custom.activityBucketName}}/*"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: "arn:aws:s3:::${{self:custom.rawActivityBucketName}}/*"
    - Effect: Allow
      Action:
        - s3:PutBucketNotification
        - s3:ListBucket
      Resource: "arn:aws:s3:::${{self:custom.rawActivityBucketName}}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${{self:provider.region}}:*:table/${{self:custom.activityTable}}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${{self:provider.region}}:*:table/${{self:custom.userTable}}"
    - Effect: Allow
      Action:
        - ssm:GetParameter
        - ssm:GetParameters
      Resource: arn:aws:ssm:${{self:provider.region}}:*:parameter/*-*-api-key
    - Effect: Allow
      Action:
        - execute-api:ManageConnections
        - execute-api:Invoke
      Resource: arn:aws:execute-api:${{self:provider.region}}:*:*/*
    - Effect: Allow
      Action:
        - cloudfront:updateDistribution
      Resource:
        Fn::Join: [':', ["arn:aws:cloudfront:", Ref: "AWS::AccountId", "distribution/${{self:custom.apiDomainZone}}"]]


custom:
    resourceTags:
      - Key: "project"
        Value: ${{self:custom.projectName}}
      - Key: "stage"
        Value: ${{opt:stage}}
      - Key: "module"
        Value: ${{self:service}}

    ## common variables
    projectName: ${{file(../../infra/stacks/global.tfvars.json):project_name}}
    domainName: ${{file(../../infra/stacks/global.tfvars.json):domain_name}}
    dataStack: ${{opt:stage}}-${{self:custom.projectName}}-data-var-stack
    apiStack: ${{opt:stage}}-${{self:custom.projectName}}-api-var-stack
    apiSubDomain: ${{file(../../infra/stacks/api/${{opt:stage}}.terraform.tfvars.json):api_sub_domain}}
    hostedZoneId: ${{cf:${{self:custom.apiStack}}.HostedZoneId}}

    ## tables
    userTable: ${{opt:stage}}-${{self:custom.projectName}}-userTable
    activityTable:  ${{opt:stage}}-${{self:custom.projectName}}-Activity

    ## buckets
    activityBucketName: ${{opt:stage}}-activity-${{self:custom.projectName}}
    rawActivityBucketName: ${{opt:stage}}-raw-activity-${{self:custom.projectName}}

    ## endpoint
    apiDomainName: ${{cf:${{self:custom.apiStack}}.APIEndpointName}}
    apiDomainZone: ${{cf:${{self:custom.apiStack}}.APIEndpointZoneId}}

    ##cognito
    userPoolArn: ${{cf:${{self:custom.dataStack}}.UserPoolArn}}
    apigwBinary:
     types:
       - '*/*'

package:
  artifact: build/distributions/${{self:service}}.zip

functions:
  GetActivityLambda:
    handler: ski.crunch.activity.GetActivityHandler
    environment:
      s3ActivityBucketName: ${{self:custom.activityBucketName}}
      activityTable: ${{self:custom.activityTable}}
      userTable: ${{cf:${{self:custom.userTable}}
      currentStage: ${{opt:stage}}
    events:
      - http:
          path: activity/{id}
          method: get
          cors:
            origin: '*'
            headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
            - Access-Control-Allow-Authorization
            - Access-Control-Allow-Origin
            allowCredentials: false
            cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate' # Caches on browser and proxy for 10 minutes and doesnt allow proxy to serve out of date content
          request:
            parameters:
              paths:
                id: true
          authorizer:
            arn: ${{self:custom.userPoolArn}}
            ## TODO -> ADDRESS THIS..
            ### SKIAPI-13 -> the value of ARN field here is now being referenced by ServerlessState class, parsing this for
            ### use in test harness
    Tags: ${{self:custom.resourceTags}}
    layers:
      - ${{cf:${{opt:stage}}-${{self:custom.projectName}}-common.UtilsLambdaLayerQualifiedArn}}
      - ${{cf:${{opt:stage}}-${{self:custom.projectName}}-common.CommonLambdaLayerQualifiedArn}}

  PutActivityLambda:
    handler: ski.crunch.activity.PutActivityHandler
    environment:
      s3RawActivityBucketName: ${{self:custom.rawActivityBucketName}}
      activityTable: ${{self:custom.activityTable}}
      userTable: ${{cf:${{self:custom.userTable}}
      currentStage: ${{opt:stage}}
    events:
     - http:
        path: activity
        method: put
        cors:
          origin: '*'
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
            - Access-Control-Allow-Authorization
            - Access-Control-Allow-Origin
        authorizer:
          arn:  ${{self:custom.userPoolArn}}
    Tags: ${{self:custom.resourceTags}}
    layers:
      - ${{cf:${{opt:stage}}-${{self:custom.projectName}}-common.UtilsLambdaLayerQualifiedArn}}
      - ${{cf:${{opt:stage}}-${{self:custom.projectName}}-common.CommonLambdaLayerQualifiedArn}}

  ParseFitActivityLambda:
    handler: ski.crunch.activity.ParseFitActivityLambda
    memorySize: 1256
    timeout: 60
    environment:
      s3ActivityBucketName: ${{self:custom.activityBucketName}}
      s3rawActivityBucketName: ${{self:custom.rawActivityBucketName}}
      activityTable: ${{self:custom.activityTable}}
      userTable: ${{self:custom.userTable}}
      currentStage: ${{opt:stage}}
      webSocketId: ${{cf:${{opt:stage}}-${{self:custom.projectName}}-websocket.ServiceEndpointWebsocket}}
      ## not sure why but this is not creating the notification configuration.  added new resource RawActivityBucketLambdaNotification instead
    events:
      - s3:
        bucket: ${{self:custom.rawActivityBucketName}}
        event: s3:ObjectCreated:*
        rules:
          - suffix: .fit
        existing: true
    Tags: ${{self:custom.resourceTags}}
    layers:
      - ${{cf:${{opt:stage}}-${{self:custom.projectName}}-common.UtilsLambdaLayerQualifiedArn}}
      - ${{cf:${{opt:stage}}-${{self:custom.projectName}}-common.CommonLambdaLayerQualifiedArn}}

resources:
  Resources:
#    NotificationConfiguration:
#      Type: AWS::S3::Bucket::NotificationConfiguration
#      Properties:
#        LambdaConfigurations:
#          - Event: "s3:objectCreated:*"
#            Filter:
#              S3Key:
#                Rules:
#                  - Name: "suffix"
#                    Value: "*.fit"
#            Function:
#              Fn::GetAtt: ['ParseFitActivityLambdaLambdaFunction', 'Arn']
    ## Search Endpoint

    RawBucketLambdaNotification:
      Type: Custom::BucketNotification
      Version: 1.0
      DependsOn: ParseFitActivityLambdaLambdaFunction
      Properties:
        ServiceToken: ${{cf:${{opt:stage}}-${{self:custom.projectName}}-cf-bucket-notification.BucketNotificationLambdaArn}}
        Name: ${{opt:stage}}-rawBucketNotification
        Region: ${{self:provider.region}}
        S3BucketName: ${{self:custom.rawActivityBucketName}}
        LambdaFunctionArn:
          Fn::Join: [':', ["arn:aws:lambda:${{self:provider.region}}", Ref: "AWS::AccountId", "function:${{self:service}}-${{opt:stage}}-ParseFitActivityLambda"]]
        S3Event: "s3:ObjectCreated:*"
        Filters:
          - "suffix:.fit"

#    RocksetIntegration:
#    Type: Custom::RocksetIntegration
#    Version: 1.0
#    Properties:
#      ServiceToken: ${{cf:${{self:custom.currentStage}}-ski-analytics-cloudformation-stack.RocksetIntegrationFunctionArn}}
#      Name: ${{self:custom.currentStage}}-searchIntegration
#      Region: ${{self:provider.region}}
#      Stage: ${{self:custom.currentStage}}
#      ApiKeySSM: ${{self:custom.currentStage}}-rockset-api-key
#      ExternalId: "7f8a915dfc74e3b5aea8f37f34f1d869726a8aca5c6a8e14d36a4825db25d628"
#      RocksetAccountId: "318212636800"
#      IntegrationType: "dynamodb"
#      AccessibleResources:
#        - "arn:aws:dynamodb:*:*:table/*"
#        - "arn:aws:dynamodb:*:*:table/*/stream/*"
#      Tags: ${{self:custom.resourceTags}}
#    RocksetWorkspace:
#      Type: Custom::RocksetWorkspace
#      Version: 1.0
#      Properties:
#        ServiceToken: ${{cf:${{self:custom.currentStage}}-ski-analytics-cloudformation-stack.RocksetWorkspaceFunctionArn}}
#        Name: activity_workspace
#        Description: crunch.ski activity table search
#        Region:  ${{self:provider.region}}
#        ApiKeySSM:  ${{self:custom.currentStage}}-rockset-api-key
#    RocksetCollection:
#      Type: Custom::RocksetCollection
#      Version: 1.0
#      Properties:
#        ServiceToken: ${{cf:${{self:custom.currentStage}}-ski-analytics-cloudformation-stack.RocksetCollectionFunctionArn}}
#        Name: ActivityCollection
#        Description: searchable version of Activity table
#        Workspace:
#          Fn::GetAtt:
#            - RocksetWorkspace
#            - WorkspaceName
#        Region: ${{self:provider.region}}
#        Stage: ${{self:custom.currentStage}}
#        IntegrationName:
#          Fn::GetAtt:
#            - RocksetIntegration
#            - IntegrationName
#        ApiKeySSM: ${{self:custom.currentStage}}-rockset-api-key
#        DynamoDbDataSource:
#          DynamoDbAwsRegion:  ${{self:provider.region}}
#          DynamoDbTableName:  ${{self:custom.currentStage}}-crunch-Activity
#          DynamoDbRcu: 1
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    ParseFitActivityLambdaLambdaPermissionS3BucketForRawActivityS3:
        Type: "AWS::Lambda::Permission"
        Properties:
          FunctionName:
            "Fn::GetAtt":
            - ParseFitActivityLambdaLambdaFunction
            - Arn
          Principal: "s3.amazonaws.com"
          Action: "lambda:InvokeFunction"
          SourceAccount:
            Ref: AWS::AccountId
          SourceArn: "arn:aws:s3:::${{self:custom.rawActivityBucketName}}"


#    ## Unfortunately necessary hack to ensure that the base path mapping is not created before the api g deployment
#    ## https://github.com/serverless/serverless/issues/4029
#    ApiMapping:
#      Type: AWS::ApiGateway::BasePathMapping
#      DependsOn: "ApiGatewayDeployment${sls:instanceId}"
#      Properties:
#        DomainName: ${{self:custom.apiSubDomain}}.${{self:custom.domainName}}
#        RestApiId:
#          Ref: ApiGatewayRestApi
#        Stage: ${{opt:stage}}

    ApiGatewayDomainNameMapping:
      Type: AWS::ApiGateway::BasePathMapping
      DependsOn: "ApiGatewayDeployment${{sls:instanceId}}"
      Properties:
        BasePath: ${{opt:stage}}
        DomainName: ${{self:custom.apiSubDomain}}.${{self:custom.domainName}}
        RestApiId:
          Ref: "ApiGatewayRestApi"  #https://forum.serverless.com/t/fixed-how-do-i-get-reference-api-gateway-restapi-id-in-serverless-yml/3397/5
        Stage: ${{opt:stage}}
        #Tags:  ${{self:custom.resourceTags}}
#    RecordSet:
#      Type: AWS::Route53::RecordSetGroup
#      Properties:
#        HostedZoneId: ${{self:custom.hostedZoneId}}
#        Comment: Alias record for ${{self:custom.apiSubDomain}}.${{self:custom.domainName}}
#        RecordSets:
#          - Name: ${{self:custom.apiSubDomain}}.${{self:custom.domainName}}
#            Type: A
#            AliasTarget:
#              HostedZoneId: ${{self:custom.apiDomainZone}}
#              DNSName:  ${{self:custom.apiDomainName}}
#                  !GetAtt: 'CloudFrontDistroForSite.DomainName'
#    RawActivityBucketLambdaNotification:
#      Type: "AWS::S3::Bucket::NotificationConfiguration"
#      Properties:
#        LambdaConfigurations:
#          - Event: "s3:objectCreated:*"
#            Filter:
#              S3Key: "*.fit"
#            Function:
#              Fn::GetAtt:
#                - ParseFitActivityLambdaLambdaFunction
#                - Arn