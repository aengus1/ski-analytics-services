# Provisions the API stack, activity rest endpoints
# Depends on authentication stack, common stack
service: api


plugins:
  - serverless-apigw-binary

custom:
  currentStage: ${{opt:stage, self:provider.stage}}
  domainName: crunch.ski
  resourceTags:
              -
                Key: "project"
                Value: "ski-analytics"
              -
                Key: "module"
                Value: "api"
  activityBucketName: "activity-${{self:custom.currentStage}}.${{self:custom.domainName}}"
  rawActivityBucketName: "activity-raw-${{self:custom.currentStage}}.${{self:custom.domainName}}"
  userPoolArn:
    Fn::ImportValue:
      Fn::Join: ['', UserPoolArn]
  activityTable:  ${{self:custom.currentStage}}-crunch-Activity
  wsEndpoint:   ${{cf:${{self:custom.currentStage}}-ski-analytics-websocket-stack.ServiceEndpointWebsocket}}
  apigwBinary:
    types:
      - '*/*'

provider:
  name: aws
  runtime: java8
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)}}" # notice the double quotes for yaml to ignore the escape characters!
  region: ca-central-1
  stage: staging
  stackName: ${{self:custom.currentStage}}-ski-analytics-api-stack
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource: "arn:aws:s3:::${{self:custom.activityBucketName}}"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: "arn:aws:s3:::${{self:custom.activityBucketName}}/*"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: "arn:aws:s3:::${{self:custom.rawActivityBucketName}}/*"
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource: "arn:aws:s3:::${{self:custom.rawActivityBucketName}}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${{opt:region, self:provider.region}}:*:table/${{self:custom.activityTable}}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${{opt:region, self:provider.region}}:*:table/${{cf:${{self:custom.currentStage}}-ski-analytics-authentication-stack.UserTableName}}"
    - Effect: Allow
      Action:
        - ssm:GetParameter
        - ssm:GetParameters
      Resource: arn:aws:ssm:${{opt:region, self:provider.region}}:*:parameter/*-*-api-key
    - Effect: Allow
      Action:
        - execute-api:ManageConnections
        - execute-api:Invoke
      Resource: arn:aws:execute-api:${{self:provider.region}}:*:*/*

package:
  artifact: build/distributions/api.zip

functions:
  GetActivityLambda:
    handler: ski.crunch.activity.GetActivityHandler
    environment:
      s3ActivityBucketName: ${{self:custom.activityBucketName}}
      activityTable: ${{self:custom.currentStage}}-crunch-Activity
      userTable: ${{cf:${{self:custom.currentStage}}-ski-analytics-authentication-stack.UserTableName}}
      currentStage: ${{self:custom.currentStage}}
    events:
      - http:
          path: activity/{id}
          method: get
          cors:
            origin: '*'
            headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
            - Access-Control-Allow-Authorization
            - Access-Control-Allow-Origin
            allowCredentials: false
            cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate' # Caches on browser and proxy for 10 minutes and doesnt allow proxy to serve out of date content
          request:
            parameters:
              paths:
                id: true
          authorizer:
            arn: arn:aws:cognito-idp:ca-central-1:556823078430:userpool/ca-central-1_bcb6X1Muk
              #  the ARN issue: https://github.com/serverless/serverless/issues/3212
              #  should be fixed soon

              ## had to hardcode this due to an issue with arns https://github.com/serverless/serverless/issues/3129
              ### note - to access this function you need to include an Authorizer header on the request, containing the
              ### Id token - not the access token
            ### SKIAPI-13 -> the value of ARN field here is now being referenced by ServerlessState class, parsing this for
            ### use in test harness
    Tags: ${{self:custom.resourceTags}}
    layers:
      - ${{cf:${{self:custom.currentStage}}-ski-analytics-common-stack.UtilsLambdaLayerQualifiedArn}}
      - ${{cf:${{self:custom.currentStage}}-ski-analytics-common-stack.CommonLambdaLayerQualifiedArn}}

  PutActivityLambda:
    handler: ski.crunch.activity.PutActivityHandler
    environment:
      s3RawActivityBucketName: ${{self:custom.rawActivityBucketName}}
      activityTable: ${{self:custom.currentStage}}-crunch-Activity
      userTable: ${{cf:${{self:custom.currentStage}}-ski-analytics-authentication-stack.UserTableName}}
      currentStage: ${{self:custom.currentStage}}
    events:
     - http:
        path: activity
        method: put
        cors:
          origin: '*'
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
            - Access-Control-Allow-Authorization
            - Access-Control-Allow-Origin
        authorizer:
          arn: arn:aws:cognito-idp:ca-central-1:556823078430:userpool/ca-central-1_bcb6X1Muk
            #Fn::Join: ['', ['arn:aws:cognito-idp:','${{self:provider.region}}-','${{self:custom.accountId}}','${{cf:${{self:custom.currentStage}}-ski-analytics-authentication-stack.UserPoolArn}}']]
           # arn:aws:cognito-idp:ca-central-1:556823078430:userpool/ca-central-1_bcb6X1Muk
    Tags: ${{self:custom.resourceTags}}
    layers:
      - ${{cf:${{self:custom.currentStage}}-ski-analytics-common-stack.UtilsLambdaLayerQualifiedArn}}
      - ${{cf:${{self:custom.currentStage}}-ski-analytics-common-stack.CommonLambdaLayerQualifiedArn}}

  ParseFitActivityLambda:
    handler: ski.crunch.activity.ParseFitActivityLambda
    memorySize: 1256
    timeout: 60
    environment:
      s3ActivityBucketName: ${{self:custom.activityBucketName}}
      s3rawActivityBucketName: ${{self:custom.rawActivityBucketName}}
      activityTable: ${{self:custom.currentStage}}-crunch-Activity
      userTable: ${{cf:${{self:custom.currentStage}}-ski-analytics-authentication-stack.UserTableName}}
      currentStage: ${{self:custom.currentStage}}
      webSocketId: ${{self:custom.wsEndpoint}}
    events:
     - s3: ForRawActivity
       event: s3:ObjectCreated:*
       rules:
           - suffix: .fit
    Tags: ${{self:custom.resourceTags}}
    layers:
      - ${{cf:${{self:custom.currentStage}}-ski-analytics-common-stack.UtilsLambdaLayerQualifiedArn}}
      - ${{cf:${{self:custom.currentStage}}-ski-analytics-common-stack.CommonLambdaLayerQualifiedArn}}

resources:
  Resources:
    ## Search Endpoint
#    RocksetIntegration:
#      Type: Custom::RocksetIntegration
#      Properties:
#        ServiceToken: ${{cf:${{self:custom.currentStage}}-ski-analytics-cloudformation-stack.RocksetIntegrationFunctionArn}}
#        Name: ${{self:custom.currentStage}}-search
#        Region: ${{self:provider.region}}
#        Stage: ${{self:custom.currentStage}}
#        RocksetUserName: ${{self:custom.currentStage}}-rockset-userz
#        ApiKeySSM: ${{self:custom.currentStage}}-rockset-api-key
#        ExternalId: "7f8a915dfc74e3b5aea8f37f34f1d869726a8aca5c6a8e14d36a4825db25d628"
#        RocksetAccountId: "318212636800"
#        IntegrationType: "dynamodb"
#        AccessibleResources:
#          - "arn:aws:dynamodb:*:*:table/*"
#          - "arn:aws:dynamodb:*:*:table/*/stream/*"
#        Tags: ${{self:custom.resourceTags}}
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    S3BucketForActivity:
      Type: AWS::S3::Bucket
      Properties:
#        AccessControl: PublicRead
        BucketName: ${{self:custom.activityBucketName}}
        Tags: ${{self:custom.resourceTags}}
    S3BucketForRawActivity:
      Type: AWS::S3::Bucket
      Properties:
#        AccessControl: PublicRead
        BucketName: ${{self:custom.rawActivityBucketName}}
        Tags: ${{self:custom.resourceTags}}
    ParseFitActivityLambdaLambdaPermissionS3BucketForRawActivityS3:
        Type: "AWS::Lambda::Permission"
        Properties:
          FunctionName:
            "Fn::GetAtt":
            - ParseFitActivityLambdaLambdaFunction
            - Arn
          Principal: "s3.amazonaws.com"
          Action: "lambda:InvokeFunction"
          SourceAccount:
            Ref: AWS::AccountId
          SourceArn: "arn:aws:s3:::${{self:custom.rawActivityBucketName}}"
    DynamoTableForActivity:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: date
            AttributeType: S
#          - AttributeName: user_id
#            AttributeType: string
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: date
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${{self:custom.currentStage}}-crunch-Activity
        Tags: ${{self:custom.resourceTags}}
    SsmParamForWeatherApiKey:
      Type: "AWS::SSM::Parameter"
      Properties:
        Name: "${{self:custom.currentStage}}-weather-api-key"
        Type: "String"
        Value: "abc123"
        Description: "SSM Parameter for storing dark sky weather api key"
    SsmParamForLocationIqKey:
      Type: "AWS::SSM::Parameter"
      Properties:
        Name: "${{self:custom.currentStage}}-location-api-key"
        Type: "String"
        Value: "abc123"
        Description: "SSM Parameter for storing location iq geocoding api key"

