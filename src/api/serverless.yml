# Provisions the API stack, activity rest endpoints
# Depends on authentication stack, common stack
service: api

plugins:
  - serverless-apigw-binary

provider:
  name: aws
  runtime: java8
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)}}" # notice the double quotes for yaml to ignore the escape characters!
  region: ${{file(../../infra/stacks/global.tfvars.json):primary_region}}
  stage: "dev"
  stackName: ${{self:custom.currentStage}}-${{self:custom.projectName}}-api-stack
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource: "arn:aws:s3:::${{self:custom.activityBucketName}}"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: "arn:aws:s3:::${{self:custom.activityBucketName}}/*"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: "arn:aws:s3:::${{self:custom.rawActivityBucketName}}/*"
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource: "arn:aws:s3:::${{self:custom.rawActivityBucketName}}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${{opt:region, self:provider.region}}:*:table/${{self:custom.activityTable}}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${{opt:region, self:provider.region}}:*:table/${{self:custom.userTable}}"
    - Effect: Allow
      Action:
        - ssm:GetParameter
        - ssm:GetParameters
      Resource: arn:aws:ssm:${{opt:region, self:provider.region}}:*:parameter/*-*-api-key
    - Effect: Allow
      Action:
        - execute-api:ManageConnections
        - execute-api:Invoke
      Resource: arn:aws:execute-api:${{self:provider.region}}:*:*/*
custom:
  currentStage: ${{opt:stage, self:provider.stage}}
  domainName: ${{file(../../infra/stacks/global.tfvars.json):domain_name}}
  projectName: ${{file(../../infra/stacks/global.tfvars.json):project_name}}
  resourceTags:
    Tags:
      - Key: "project"
        Value: ${{file(../../infra/stacks/global.tfvars.json):project_name}}
      - Key: "module"
        Value: ${{self:provider.stackName}}
      - Key: "stage"
        Value: ${{self:custom.currentStage}}
  activityBucketName: ${{self:custom.currentStage}}-activity-${{self:custom.projectName}}
  rawActivityBucketName: ${{self:custom.currentStage}}-raw-activity-${{self:custom.projectName}}
  userPoolArn: ${{cf:${{self:custom.currentStage}}-${{self:custom.projectName}}-data-var-stack.UserPoolArn}}"
  activityTable:  ${{self:custom.currentStage}}-${{self:custom.projectName}}-Activity
  userTable: ${{self:custom.currentStage}}-${{self:custom.projectName}}-userTable
  wsEndpoint:   ${{cf:${{self:custom.currentStage}}-ski-analytics-websocket-stack.ServiceEndpointWebsocket}}
  apigwBinary:
    types:
      - '*/*'

package:
  artifact: build/distributions/api.zip

functions:
  GetActivityLambda:
    handler: ski.crunch.activity.GetActivityHandler
    environment:
      s3ActivityBucketName: ${{self:custom.activityBucketName}}
      activityTable: ${{self:custom.activityTable}}
      userTable: ${{cf:${{self:custom.userTable}}
      currentStage: ${{self:custom.currentStage}}
    events:
      - http:
          path: activity/{id}
          method: get
          cors:
            origin: '*'
            headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
            - Access-Control-Allow-Authorization
            - Access-Control-Allow-Origin
            allowCredentials: false
            cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate' # Caches on browser and proxy for 10 minutes and doesnt allow proxy to serve out of date content
          request:
            parameters:
              paths:
                id: true
          authorizer:
            arn: ${{self:custom.userPoolArn}}
            ## TODO -> ADDRESS THIS..
            ### SKIAPI-13 -> the value of ARN field here is now being referenced by ServerlessState class, parsing this for
            ### use in test harness
    Tags: ${{self:custom.resourceTags}}
    layers:
      - ${{cf:${{self:custom.currentStage}}-ski-analytics-common-stack.UtilsLambdaLayerQualifiedArn}}
      - ${{cf:${{self:custom.currentStage}}-ski-analytics-common-stack.CommonLambdaLayerQualifiedArn}}

  PutActivityLambda:
    handler: ski.crunch.activity.PutActivityHandler
    environment:
      s3RawActivityBucketName: ${{self:custom.rawActivityBucketName}}
      activityTable: ${{self:custom.activityTable}}
      userTable: ${{cf:${{self:custom.userTable}}
      currentStage: ${{self:custom.currentStage}}
    events:
     - http:
        path: activity
        method: put
        cors:
          origin: '*'
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
            - Access-Control-Allow-Authorization
            - Access-Control-Allow-Origin
        authorizer:
          arn:  ${{self:custom.userPoolArn}}
    Tags: ${{self:custom.resourceTags}}
    layers:
      - ${{cf:${{self:custom.currentStage}}-ski-analytics-common-stack.UtilsLambdaLayerQualifiedArn}}
      - ${{cf:${{self:custom.currentStage}}-ski-analytics-common-stack.CommonLambdaLayerQualifiedArn}}

  ParseFitActivityLambda:
    handler: ski.crunch.activity.ParseFitActivityLambda
    memorySize: 1256
    timeout: 60
    environment:
      s3ActivityBucketName: ${{self:custom.activityBucketName}}
      s3rawActivityBucketName: ${{self:custom.rawActivityBucketName}}
      activityTable: ${{self:custom.activityTable}}
      userTable: ${{cf:${{self:custom.userTable}}
      currentStage: ${{self:custom.currentStage}}
      webSocketId: ${{self:custom.wsEndpoint}}
    events:
     - s3: ForRawActivity
       event: s3:ObjectCreated:*
       rules:
           - suffix: .fit
    Tags: ${{self:custom.resourceTags}}
    layers:
      - ${{cf:${{self:custom.currentStage}}-ski-analytics-common-stack.UtilsLambdaLayerQualifiedArn}}
      - ${{cf:${{self:custom.currentStage}}-ski-analytics-common-stack.CommonLambdaLayerQualifiedArn}}

resources:
  Resources:
    ## Search Endpoint
#    RocksetIntegration:
#    Type: Custom::RocksetIntegration
#    Version: 1.0
#    Properties:
#      ServiceToken: ${{cf:${{self:custom.currentStage}}-ski-analytics-cloudformation-stack.RocksetIntegrationFunctionArn}}
#      Name: ${{self:custom.currentStage}}-searchIntegration
#      Region: ${{self:provider.region}}
#      Stage: ${{self:custom.currentStage}}
#      ApiKeySSM: ${{self:custom.currentStage}}-rockset-api-key
#      ExternalId: "7f8a915dfc74e3b5aea8f37f34f1d869726a8aca5c6a8e14d36a4825db25d628"
#      RocksetAccountId: "318212636800"
#      IntegrationType: "dynamodb"
#      AccessibleResources:
#        - "arn:aws:dynamodb:*:*:table/*"
#        - "arn:aws:dynamodb:*:*:table/*/stream/*"
#      Tags: ${{self:custom.resourceTags}}
#    RocksetWorkspace:
#      Type: Custom::RocksetWorkspace
#      Version: 1.0
#      Properties:
#        ServiceToken: ${{cf:${{self:custom.currentStage}}-ski-analytics-cloudformation-stack.RocksetWorkspaceFunctionArn}}
#        Name: activity_workspace
#        Description: crunch.ski activity table search
#        Region:  ${{self:provider.region}}
#        ApiKeySSM:  ${{self:custom.currentStage}}-rockset-api-key
#    RocksetCollection:
#      Type: Custom::RocksetCollection
#      Version: 1.0
#      Properties:
#        ServiceToken: ${{cf:${{self:custom.currentStage}}-ski-analytics-cloudformation-stack.RocksetCollectionFunctionArn}}
#        Name: ActivityCollection
#        Description: searchable version of Activity table
#        Workspace:
#          Fn::GetAtt:
#            - RocksetWorkspace
#            - WorkspaceName
#        Region: ${{self:provider.region}}
#        Stage: ${{self:custom.currentStage}}
#        IntegrationName:
#          Fn::GetAtt:
#            - RocksetIntegration
#            - IntegrationName
#        ApiKeySSM: ${{self:custom.currentStage}}-rockset-api-key
#        DynamoDbDataSource:
#          DynamoDbAwsRegion:  ${{self:provider.region}}
#          DynamoDbTableName:  ${{self:custom.currentStage}}-crunch-Activity
#          DynamoDbRcu: 1
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
#    S3BucketForActivity:
#      Type: AWS::S3::Bucket
#      Properties:
##        AccessControl: PublicRead
#        BucketName: ${{self:custom.activityBucketName}}
#        Tags: ${{self:custom.resourceTags}}
#    S3BucketForRawActivity:
#      Type: AWS::S3::Bucket
#      Properties:
##        AccessControl: PublicRead
#        BucketName: ${{self:custom.rawActivityBucketName}}
#        Tags: ${{self:custom.resourceTags}}
    ParseFitActivityLambdaLambdaPermissionS3BucketForRawActivityS3:
        Type: "AWS::Lambda::Permission"
        Properties:
          FunctionName:
            "Fn::GetAtt":
            - ParseFitActivityLambdaLambdaFunction
            - Arn
          Principal: "s3.amazonaws.com"
          Action: "lambda:InvokeFunction"
          SourceAccount:
            Ref: AWS::AccountId
          SourceArn: "arn:aws:s3:::${{self:custom.rawActivityBucketName}}"
#    DynamoTableForActivity:
#      Type: AWS::DynamoDB::Table
#      DeletionPolicy: Retain
#      Properties:
#        AttributeDefinitions:
#          - AttributeName: id
#            AttributeType: S
#          - AttributeName: date
#            AttributeType: S
##          - AttributeName: user_id
##            AttributeType: string
#        KeySchema:
#          - AttributeName: id
#            KeyType: HASH
#          - AttributeName: date
#            KeyType: RANGE
#        ProvisionedThroughput:
#          ReadCapacityUnits: 1
#          WriteCapacityUnits: 1
#        TableName: ${{self:custom.currentStage}}-crunch-Activity
#        Tags: ${{self:custom.resourceTags}}
#    SsmParamForWeatherApiKey:
#      Type: "AWS::SSM::Parameter"
#      Properties:
#        Name: "${{self:custom.currentStage}}-weather-api-key"
#        Type: "String"
#        Value: "abc123"
#        Description: "SSM Parameter for storing dark sky weather api key"
#    SsmParamForLocationIqKey:
#      Type: "AWS::SSM::Parameter"
#      Properties:
#        Name: "${{self:custom.currentStage}}-location-api-key"
#        Type: "String"
#        Value: "abc123"
#        Description: "SSM Parameter for storing location iq geocoding api key"
#  Outputs:
#    CreateIntegrationMessage:
#      Value:
#        Fn::GetAtt:
#          - RocksetIntegration
#          - Message
#    IntegrationName:
#      Value:
#        Fn::GetAtt:
#          - RocksetIntegration
#          - IntegrationName
#      Export:
#        Name: 'RocksetIntegrationName'
#    CreateWorkspaceMessage:
#      Value:
#        Fn::GetAtt:
#          - RocksetWorkspace
#          - Message
#    WorkspaceName:
#      Value:
#        Fn::GetAtt:
#          - RocksetWorkspace
#          - WorkspaceName
#      Export:
#        Name:  'RocksetWorkspaceName'
#    CreateCollectionMessage:
#      Value:
#        Fn::GetAtt:
#          - RocksetCollection
#          - Message
#    CollectionName:
#      Value:
#        Fn::GetAtt:
#          - RocksetCollection
#          - CollectionName
#      Export:
#        Name:  'RocksetCollectionName'
