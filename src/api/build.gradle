plugins {
    id 'scala'
    id 'java'
}
apply plugin: 'ski.crunch.build.deploy'


/**
 * To get joint compilation, you have to add some Java sources to the “scala” source directory set,
 * and at the same time take them away from the “java” source directory set. For example,
 * init you want everything to be joint-compiled, do this:
 *
 * sourceSets.main.scala.srcDir "src/main/java"
 * sourceSets.main.java.srcDirs = []
 * Now both the Scala and Java code will be compiled by the compileScala task.
 */
sourceSets {
    main {
        scala {
            srcDirs = ['src/main/scala', 'src/main/java']
        }
        java {
            srcDirs = []
        }
    }
    integrationTest {

        scala {
            compileClasspath += main.output + test.output //+ configurations.integrationTestCompileClasspath
            runtimeClasspath += main.output + test.output //+ configurations.integrationTestRuntimeClasspath
            srcDirs = ['src/integration-test/scala', 'src/integration-test/java']
            outputDir = file("$buildDir/classes/scala/integrationTest")
        }
        java {
            compileClasspath += sourceSets.main.output + configurations.testCompileClasspath + configurations.integrationTestCompileClasspath
            runtimeClasspath += sourceSets.main.output + configurations.integrationTestRuntimeClasspath
            srcDirs = ['src/integration-test/java', 'src/integration-test/scala']
            outputDir = file("$buildDir/classes/java/integrationTest")
        }
        resources.srcDir file('src/integration-test/resources')
    }
}


dependencies {
   implementation(
            "org.scala-lang:scala-library:2.11.12",
            "com.amazonaws:aws-java-sdk-cognitoidp:${awsVersion}",
            "com.amazonaws:aws-java-sdk-ssm:${awsVersion}",
            "org.locationtech.jts:jts:1.16.1",
            "org.geotools:gt-main:21.0",
            "org.geotools:gt-epsg-hsql:21.1"
    )

    compileOnly(
            project(':common')
    )

    testImplementation(
            project(':common')
    )

    integrationTestImplementation(
            "com.amazonaws:aws-java-sdk-cloudformation:${awsVersion}",
            "com.amazonaws:aws-java-sdk-core:${awsVersion}",
            "org.scalatest:scalatest_2.11:3.0.0",
            "org.junit.jupiter:junit-jupiter-api:5.4.0",
            "org.glassfish.jersey.core:jersey-client:2.5.1",
            "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
            "org.mockito:mockito-all:1.10.19",
            project(path: ':common', configuration: 'testClasses'),
            project(':common')
    )
    integrationTestRuntimeOnly(
            "org.junit.jupiter:junit-jupiter-engine:5.1.0",
            "javax.xml.bind:jaxb-api:2.3.1",
            project(':common'),
            project(path: ':common', configuration: 'testClasses')
    )
}

deploy.dependencies = ['auth', 'cf-bucket-notif', 'websocket', 'common']


/**
 * Builds the zip file for upload to AWS
 */
task buildZip(type: Zip) {
    archiveBaseName = "${project.name}"
    from compileJava
    from compileScala
    from processResources
    into('lib') {
        from ([ configurations.compileClasspath ] - [ configurations.compileOnly ])
    }
}

build.dependsOn buildZip