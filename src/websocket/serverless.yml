service: websocket


provider:
  name: aws
  runtime: java11
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)}}" # notice the double quotes for yaml to ignore the escape characters!
  region: ${{file(../../infra/envs/global.tfvars.json):primary_region}}
  stackName: ${{opt:stage}}-${{self:custom.projectName}}-${{self:service}}
  stage: ${{opt:stage}}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource: arn:aws:execute-api:${{self:provider.region}}:*:*/*
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${{self:provider.region}}:*:table/${{self:custom.userTable}}
  websocketsApiName: ${{opt:stage}}-${{self:custom.projectName}}-ws
  websocketsApiRouteSelectionExpression: $request.body.action

custom: ${{file(../../config/custom.yml)}}

package:
  artifact: build/distributions/${{self:service}}.zip

functions:
   # web socket connection for client callbacks
  connectionHandler:
    handler: ski.crunch.websocket.IncomingWebSocketHandler
    environment:
      userTable: ${{self:custom.userTable}}
    events:
      - websocket:
          route: $connect
          authorizer:
            name: wsAuth
            identitySource:
              - 'route.request.querystring.token'
      - websocket:
          route: $disconnect
      - websocket:
          route: $default
          handler: ski.crunch.websocket.IncomingWebSocketHandler
    layers:
      - ${{cf:${{opt:stage}}-${{self:custom.projectName}}-common.UtilsLambdaLayerQualifiedArn}}
      - ${{cf:${{opt:stage}}-${{self:custom.projectName}}-common.CommonLambdaLayerQualifiedArn}}

    # custom authorizer for websocket (cognito auth not yet supported with apig ws)
  wsAuth:
    handler: ski.crunch.websocket.CustomWebSocketAuthorizer
    environment:
      appClientId: ${{self:custom.userPoolClientId}}
      userPoolId: ${{self:custom.userPoolId}}
      region: ${{self:provider.region}}
    layers:
      - ${{cf:${{opt:stage}}-${{self:custom.projectName}}-common.UtilsLambdaLayerQualifiedArn}}
      - ${{cf:${{opt:stage}}-${{self:custom.projectName}}-common.CommonLambdaLayerQualifiedArn}}
Resources:
  resources:
    WsDomainNameMapping:
      Type: AWS::ApiGatewayV2::ApiMapping
      Properties:
        ApiId:
          Ref: "WebsocketsApi"
        ApiMappingKey: v1
        DomainName: ${{self:custom.wsSubDomain}}.${{self:custom.domainName}}
        Stage: ${{self:provider.stage}}
        Tags:  ${{self:custom.resourceTags}}
Outputs:
  WebSocketId:
    Value:
      Fn::Join: ['', [Ref: AWS::StackName, '.ServiceEndpointWebsocket']]
    Export:
      Name:
       Fn::Join: ['', [Ref: AWS::StackName, '-WebSocketId']]
