## Stack provides two lambda layers:  utils (common code), and common (common dependencies)
## No dependencies on other stacks
service: common

provider:
  name: aws
  runtime: java8
  region: ${{file(../../infra/stacks/global.tfvars.json):primary_region}}
  stage: ${{file(../../infra/stacks/global.tfvars.json):stage}}
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)}}" # notice the double quotes for yaml to ignore the escape characters!
  stackName: ${{self:custom.currentStage}}-${{self:custom.projectName}}-${{self:service}}

custom:
  currentStage: ${{opt:stage, self:provider.stage}}
  projectName: ${{file(../../infra/stacks/global.tfvars.json):project_name}}

layers:
  utils:
    name: ${{self:custom.currentStage}}-layer-utils
    description: domain classes for object model and utilities
    compatibleRuntimes:
      - java8
    retain: true
    package:
      include: 
        - src/main/java/ski/crunch/**
      artifact: build/distributions/ski-crunch-utils.zip
  common:
    name: ${{self:custom.currentStage}}-layer-common
    description: common dependencies for all services
    compatibleRuntimes:
      - java8
    retain: true
    package:
      include:
        - src/main/java/*
      artifact: build/distributions/ski-crunch-common.zip

#resources:
#  Outputs:
#    UtilsLayerVersion:
#      Value:  ${{cf:${{self:provider.stackName}}.UtilsLambdaLayerQualifiedArn}}
#      Export:
#        Name: UtilsLayerVersion
#    CommonLayerVersion:
#      Value:
#        Ref: CommonLambdaLayer
#      Export:
#        Name: CommonLayerVersion