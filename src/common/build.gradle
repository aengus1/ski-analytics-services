plugins {
    id 'java-library'
}

configurations {
    testClasses {
        extendsFrom(integrationTestRuntime)
    }
}

dependencies {
    api(
            "com.amazonaws:aws-java-sdk-cloudformation:${awsVersion}",
            "com.amazonaws:aws-java-sdk-cognitoidp:${awsVersion}",
            "com.amazonaws:aws-java-sdk-ssm:${awsVersion}",
            "com.amazonaws:aws-lambda-java-core:1.1.0",
            "com.amazonaws:aws-java-sdk-s3:${awsVersion}",
            "com.amazonaws:aws-java-sdk-dynamodb:${awsVersion}",
            "com.amazonaws:aws-java-sdk-iam:${awsVersion}",
            "com.amazonaws:aws-lambda-java-log4j:1.0.0",
            "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
            "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
            "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}",
            "org.apache.httpcomponents:httpclient:4.5.5",
            "commons-io:commons-io:2.5",
            "org.apache.commons:commons-compress:1.20",
            "com.google.protobuf:protobuf-java:3.5.0",
            "org.apache.logging.log4j:log4j-api:2.13.0",
            "org.apache.logging.log4j:log4j-core:2.13.0",
            "org.apache.logging.log4j:log4j-slf4j18-impl:2.13.0",
            "com.amazonaws:aws-lambda-java-log4j2:1.1.0"
    )

    implementation(
            "com.amazonaws:aws-java-sdk-cloudformation:${awsVersion}",
            "com.amazonaws:aws-java-sdk-cognitoidp:${awsVersion}",
            "com.amazonaws:aws-java-sdk-ssm:${awsVersion}",
            "com.amazonaws:aws-lambda-java-core:1.1.0",
            "com.amazonaws:aws-java-sdk-s3:${awsVersion}",
            "com.amazonaws:aws-java-sdk-dynamodb:${awsVersion}",
            "com.amazonaws:aws-java-sdk-iam:${awsVersion}",
            "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
            "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
            "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}",
            "org.apache.httpcomponents:httpclient:4.5.5",
            "commons-io:commons-io:2.5",
            "com.google.protobuf:protobuf-java:3.5.0"
    )

    integrationTestRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine:5.4.0'
    )


}
compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

task utilsJar(type: Jar) {
    archiveBaseName = project.name
    includeEmptyDirs = false
    from sourceSets.main.allJava
    include "**\\ski\\crunch\\**"
    exclude "**\\ski\\crunch\\cloudformation\\**"
}

task allJar(type: Jar) {
    archiveBaseName = "${project.name}-all"
    includeEmptyDirs = false
    from compileJava
    from processResources
    from([configurations.runtimeClasspath] - [configurations.compileOnly])
    include "**\\ski\\crunch\\**"
}

// Task for building the zip file for upload
task buildUtilsZip(type: Zip) {
    // set the base name of the zip file
    archiveBaseName = "crunch-ski-utils"
    from(fileTree("build/libs/common.jar")) {
        excludes['ski/crunch/cloudformation/**']
        into('/java/lib')
    }
}

task buildCommonZip(type: Zip) {
    archiveBaseName = "crunch-ski-common"
    from(configurations.runtimeClasspath) {
        excludes['ski/crunch/**']
        into('/java/lib')
    }
}

task cloudformationJar(type: Jar) {
    archiveBaseName = 'cf-common'
    includeEmptyDirs = false
    from sourceSets.main.allJava
    include "**\\ski\\crunch\\cloudformation\\**"
}

task buildCustomCloudformationZip(type: Zip) {
    archiveBaseName = "crunch-ski-cf"
    from(fileTree("build/libs/cf-common.jar")) {
        into('/java/lib')
    }
}

task testJar(type: Jar) {
    archiveClassifier = 'test'
    from sourceSets.integrationTest.output
}

artifacts {
    testClasses testJar
}

build.dependsOn utilsJar
build.dependsOn buildUtilsZip
build.dependsOn buildCommonZip
buildCustomCloudformationZip.dependsOn cloudformationJar
build.dependsOn buildCustomCloudformationZip
build.dependsOn testJar
build.dependsOn allJar

